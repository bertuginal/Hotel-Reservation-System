@model Hotel_Reservation_System.Models.Admin

@{
    ViewBag.Title = "Edit Admin";
}

<link href="~/Content/css-folder/account/admin/edit-a.css" rel="stylesheet" type="text/css" />

@using (Html.BeginForm("Edit", "Admin", FormMethod.Post, new { enctype = "multipart/form-data", @class = "form-horizontal", @role = "form" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.Id)
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="admin-edit-container">
        <div class="left-panel">
            <div class="profile-picture-container">
                <div class="profile-picture-wrapper">
                    <img src="~/Content/images/profile-photos/default.jpg" alt="Profile Picture" class="profile-picture" />
                    <button type="button" class="btn btn-camera" id="uploadButton">
                        <i class="fa-solid fa-camera"></i>
                    </button>
                    <input type="file" id="fileInput" name="profilePicture" accept="image/*" style="display: none;" />
                </div>
                <p class="left-email">@Model.Email</p>
                <p class="last-edited">Created date: @Model.CreatedDate</p>
                <p class="last-edited">Last edited date: @Model.EditedDate</p>
                <div class="copy-user-id">
                    <p class="user-id">
                        <b class="title">User ID :</b> @Model.Id
                    </p>
                    <button type="button" class="btn btn-copy" onclick="copyUserId(this)">
                        <i class="fa-solid fa-copy"></i>
                    </button>
                </div>

                <ul class="actions-list">
                    <li><button class="btn btn-link"><i class="fa-solid fa-envelope"></i> Change E-mail</button></li>
                    <li><button class="btn btn-link"><i class="fa-solid fa-lock"></i> Change Password</button></li>
                    <li>
                        <a href="@Url.Action("Delete", "Admin", new { id = Model.Id })" class="btn btn-banned">
                            <i class="fa-solid fa-ban"></i> Ban User
                        </a>
                    </li>
                </ul>
            </div>

        </div>

        <div class="right-panel">
            <div class="form-body">
                <h3 class="section-title">Personal Information</h3>
                <div class="row">
                    <div class="form-group col-md-6">
                        <label>First Name</label>
                        @Html.TextBoxFor(m => m.FirstName, new { @class = "form-control" })
                    </div>
                    <div class="form-group col-md-6">
                        <label>Last Name</label>
                        @Html.TextBoxFor(m => m.LastName, new { @class = "form-control" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-6">
                        <label>E-mail Address</label>
                        <div class="input-wrapper">
                            @Html.TextBoxFor(m => m.Email, new { @class = "form-control", @readonly = "readonly" })
                            <span class="status-badge verified">Verified</span>
                        </div>
                    </div>

                    <div class="form-group col-md-6">
                        <label>Password</label>
                        @Html.TextBoxFor(m => m.Password, new { @class = "form-control", @readonly = "readonly" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-3">
                        <label>Area Code</label>
                        <select id="AreaCode" name="AreaCode" class="form-control">
                            <option value="@Model.AreaCode">@(!string.IsNullOrEmpty(Model.AreaCode) ? Model.AreaCode : "Select Area Code ⏷")</option>
                            @if (ViewBag.AreaCodeName != null)
                            {
                                foreach (var areaCode in (List<string>)ViewBag.AreaCodeName)
                                {
                                    <option value="@areaCode" @(areaCode == Model.AreaCode ? "selected" : "")>
                                        @areaCode
                                    </option>
                                }
                            }
                        </select>
                    </div>
                    <div class="form-group col-md-9">
                        <label>Phone Number</label>
                        <div class="input-wrapper">
                            @Html.TextBoxFor(m => m.Phone, new { @class = "form-control" })
                            <span class="status-badge verified">Verified</span>
                        </div>
                    </div>
                </div>

                <div class="form-actions">
                    <input type="submit" value="Save Changes" class="btn btn-save" />
                    @Html.ActionLink("Cancel", "Index", null, new { @class = "btn btn-cancel" })
                </div>
            </div>
        </div>

    </div>
}

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const uploadButton = document.getElementById("uploadButton");
        const fileInput = document.getElementById("fileInput");
        const profilePreview = document.getElementById("profilePreview");

        uploadButton.addEventListener("click", function () {
            fileInput.click(); // Dosya seçme penceresini aç
        });

        fileInput.addEventListener("change", function () {
            const file = fileInput.files[0];
            if (file) {
                const reader = new FileReader();

                // Mevcut görüntüyü temizle
                profilePreview.src = "";

                // Yeni görüntüyü yükle ve göster
                reader.onload = function (e) {
                    profilePreview.src = e.target.result; // Yeni yol
                };
                reader.readAsDataURL(file); // Yeni dosya için yol oluştur
            }
        });
    });


    function copyUserId(button) {

        const userIdText = button.parentElement.querySelector('.user-id').innerText;

        const userId = userIdText.replace("User ID :", "").trim();

        navigator.clipboard.writeText(userId).then(() => {

            const icon = button.querySelector('i');
            icon.classList.remove('fa-copy');
            icon.classList.add('fa-check');

            setTimeout(() => {
                icon.classList.remove('fa-check');
                icon.classList.add('fa-copy');
            }, 1500);
        }).catch(err => {
            console.error('Error copying text: ', err);
        });
    }



</script>