@model Hotel_Reservation_System.Models.Hotel
@using Hotel_Reservation_System.Models
@using System.ComponentModel.DataAnnotations

@{
    ViewBag.Title = "Create Hotel";
}

<link href="~/Content/css-folder/hotel/create-h.css" rel="stylesheet" type="text/css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>


@using (Html.BeginForm("Create", "Hotel", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        <h2>HOTEL CREATE PANEL</h2>
        <h4>Please fill in the required fields completely and accurately!</h4>
        <hr />
        <h6>* are required areas!</h6>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-row">
            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control", placeholder = "Name" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>

            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label" })
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control", placeholder = "Title" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Description, new { @class = "form-control", rows = 5, placeholder = "Description..." })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col-md-6">
                <b>Price Per Night*</b>
                @Html.EditorFor(model => model.PricePerNight, new { htmlAttributes = new { @class = "form-control", placeholder = "₺" } })
                @Html.ValidationMessageFor(model => model.PricePerNight, "", new { @class = "text-danger" })
            </div>
            <div class="form-group col-md-6">
                <b>Image*</b>
                <input type="file" name="hotelImage" class="form-control" />
            </div>
        </div>

        <div class="form-row">
            <div class="form-group col-md-6">
                <b>Rating*</b>
                <div class="rating-group">
                    @for (int i = 1; i <= 5; i++)
                    {
                        <input type="radio" id="rating-@i" name="Rating" value="@i" />
                        <label class="radio-inline" for="rating-@i">@i</label>
                    }
                </div>
            </div>
            <div class="form-group col-md-6">

            </div>
        </div>

        <div class="form-group">
            <div class="facility-group">
                @foreach (FacilityHotel facility in (List<FacilityHotel>)ViewBag.Facilities)
                {
                    var facilityValue = (int)facility;
                    var displayName = FacilityExtensions.GetEnumDisplayNameHotel(facility);
                    <div class="form-check">
                        <input type="checkbox"
                               name="SelectedFacilities"
                               value="@facilityValue"
                               id="facility-@facilityValue"
                               class="facility-checkbox @((facility == FacilityHotel.None) ? "facility-none" : "")" 
                               @(facility == FacilityHotel.None ? "checked" : "")/>
                        <label for="facility-@facilityValue" class="form-check-label">@displayName</label>
                    </div>
                }
            </div>
        </div>


        <div class="form-group">
            <div id="map" style="height: 250px; width: 100%;"></div>
            <br />
            <div class="col-md-12">
                <input type="text" id="location" name="Location" class="form-control location-area" readonly />
            </div>
        </div>


        <hr />

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-success" />
                @Html.ActionLink("Admin List", "Index", "Admin", null, new { @class = "btn btn-dark" })
            </div>
        </div>
    </div>
}


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

<script>

    //facility-none
    document.addEventListener("DOMContentLoaded", function () {
        const noneCheckbox = document.querySelector(".facility-none");
        const allCheckboxes = document.querySelectorAll(".facility-checkbox");

        noneCheckbox.addEventListener("change", function () {
            if (noneCheckbox.checked) {
                allCheckboxes.forEach(cb => {
                    if (!cb.classList.contains("facility-none")) {
                        cb.checked = false;
                        cb.disabled = true;
                    }
                });
            } else {
                allCheckboxes.forEach(cb => {
                    if (!cb.classList.contains("facility-none")) {
                        cb.disabled = false;
                    }
                });
            }
        });

        allCheckboxes.forEach(cb => {
            if (!cb.classList.contains("facility-none")) {
                cb.addEventListener("change", function () {
                    if (cb.checked) {
                        noneCheckbox.checked = false;
                    }
                });
            }
        });
    });

    //map
    var map = L.map('map').setView([38.4237, 27.1428], 13);
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
    }).addTo(map);

    var marker;

    function onMapClick(e) {
        if (marker) {
            map.removeLayer(marker);
        }
        marker = L.marker(e.latlng).addTo(map);

        fetch(`https://nominatim.openstreetmap.org/reverse?format=json&lat=${e.latlng.lat}&lon=${e.latlng.lng}`)
            .then(response => response.json())
            .then(data => {
                var address = data.display_name;
                document.getElementById("location").value = address;
            })
            .catch(error => console.log(error));
    }

    map.on('click', onMapClick);
</script>
